=============================================================================
List of generated methods in project: main

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "CAN"       (component FreescaleCAN)
   - CAN_SetAcceptanceCode -Sets the acceptance code registers. This method writes a code mask directly to the acceptance code 
                registers.
   - CAN_SetAcceptanceMask -Sets the acceptance mask registers. This method writes an acceptance mask directly to the 
                acceptance mask registers.
   - CAN_SetAcceptanceMode -Sets the acceptance mode register.
   - CAN_SendFrame -Sends the frame via the CAN device. Using this method the user can send own message to the CAN bus. This 
                method allows to specify CAN buffer number, message ID, data to be sent and frame type 
                (DATA_FRAME/REMOTE_FRAME).
   - CAN_ReadFrame -Reads a frame from the CAN device. The user is informed about CAN reception through OnFullRxBuffer event or 
                GetStateRX method.
   - CAN_GetStateTX -Returns a value of the transmission complete flags.
   - CAN_GetStateRX -Returns a value of the reception complete flag.
   - CAN_GetError -Returns the content of the receiver flag register.
   - CAN_SendFrameExt -Sends a frame. This method automatically selects a free transmit buffer for data transmission. The user 
                cannot specify a transmit buffer.

Module "WDog_1S"   (component WatchDog)
   - WDog_1S_Clear -Clears the watchdog timer (it makes the timer restart from zero).

Module "ADCH"      (component ADC)
   - ADCH_Enable -Enables A/D converter component. <Events> may be generated (<DisableEvent>/<EnableEvent>). If possible, this 
                method switches on A/D converter device, voltage reference, etc.
   - ADCH_Disable -Disables A/D converter component. No <events> will be generated. If possible, this method switches off A/D 
                converter device, voltage reference, etc.
   - ADCH_Start -This method starts continuous conversion on all channels that are set in the component inspector. When each 
                measurement on all channels has finished the <OnEnd > event may be invoked. This method is not available if the 
                <interrupt service> is disabled and the device doesn't support the continuous mode. Note: If time of 
                measurement is too short and the instruction clock is too slow then the conversion complete interrupt and its 
                handler may cause a system overflow.
   - ADCH_Stop -This method stops the continuous measurement or disables a trigger mode (if supported by HW), which has been 
                started by one of the following methods:  [ Version specific information for Freescale ColdFireV1, HCS08, HC08 
                and RS08 derivatives ]     - <Start>     - <EnableIntChanTrigger>    - <EnableExtChanTrigger> The Stop method 
                is available if one of the previously mentioned methods is supported by A/D converter device and is enabled to 
                be generated.
   - ADCH_Measure -This method performs one measurement on all channels that are set in the component inspector. (Note: If the 
                <number of conversions> is more than one the conversion of A/D channels is performed specified number of times.)
   - ADCH_GetValue -Returns the last measured values for all channels. Format and width of the value is a native format of the 
                A/D converter.

Module "SPI_DriverSS_1" (component BitIO)
   - SPI_DriverSS_1_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read 
                and returned. If the direction is [output] then the last written value is returned (see <Safe mode> property 
                for limitations). This method cannot be disabled if direction is [input].
   - SPI_DriverSS_1_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - SPI_DriverSS_1_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - SPI_DriverSS_1_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "SPI"       (component SynchroMaster)
   - SPI_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it does not 
                wait for data).   For information about SW overrun behavior please see <General info page>.
   - SPI_SendChar -Sends one character to the channel.
   - SPI_CharsInRxBuf -Returns the number of characters in the input buffer.  Note: If the Interrupt service is disabled, and 
                the Ignore empty character is set to yes, and a character has been received, then this method returns 1 
                although it was an empty character.  (deprecated method - Use the GetCharsInRxBuf method instead!)
   - SPI_GetCharsInRxBuf -Returns the number of characters in the input buffer.  Note: If the Interrupt service is disabled, 
                and the Ignore empty character is set to yes, and a character has been received, then this method returns 1 
                although it was an empty character.
   - SPI_CharsInTxBuf -Returns the number of characters in the output buffer.  (deprecated method - Use the GetCharsInRxBuf 
                method instead!)
   - SPI_GetCharsInTxBuf -Returns the number of characters in the output buffer.

Module "SPI_DriverSS_2" (component BitIO)
   - SPI_DriverSS_2_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read 
                and returned. If the direction is [output] then the last written value is returned (see <Safe mode> property 
                for limitations). This method cannot be disabled if direction is [input].
   - SPI_DriverSS_2_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - SPI_DriverSS_2_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - SPI_DriverSS_2_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "SPI_DriverINH_1" (component BitIO)
   - SPI_DriverINH_1_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is 
                read and returned. If the direction is [output] then the last written value is returned (see <Safe mode> 
                property for limitations). This method cannot be disabled if direction is [input].
   - SPI_DriverINH_1_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - SPI_DriverINH_1_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - SPI_DriverINH_1_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "SPI_DriverFault_1" (component BitIO)
   - SPI_DriverFault_1_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is 
                read and returned. If the direction is [output] then the last written value is returned (see <Safe mode> 
                property for limitations). This method cannot be disabled if direction is [input].

Module "SPI_DriverFault_2" (component BitIO)
   - SPI_DriverFault_2_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is 
                read and returned. If the direction is [output] then the last written value is returned (see <Safe mode> 
                property for limitations). This method cannot be disabled if direction is [input].

Module "SPI_DriverINH_2" (component BitIO)
   - SPI_DriverINH_2_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is 
                read and returned. If the direction is [output] then the last written value is returned (see <Safe mode> 
                property for limitations). This method cannot be disabled if direction is [input].
   - SPI_DriverINH_2_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - SPI_DriverINH_2_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - SPI_DriverINH_2_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "TI_1ms"    (component TimerInt)
   - TI_1ms_Enable -This method enables the component - it starts the timer. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - TI_1ms_Disable -This method disables the component - it stops the timer. No events will be generated.

Module "TI_10ms"   (component TimerInt)

Module "Cpu"       (component MC9S08DZ60_64)
   - Cpu_EnableInt -Enables maskable interrupts
   - Cpu_DisableInt -Disables maskable interrupts

===================================================================================
